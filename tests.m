function [meannormdif, meanerrors] = tests(outC, inC, batchsize)

    % This function is a dummy MATLAB function that reads the results obtained 
    % from findingaleph.f90 and computes something (the user can modify this
    % as required).

    % Input arguments:
    % outC : cell generated by readpfile with the contents of pefileXX.txt, where
    %        XX is some number between 01 and 10 (these are the P+E matrices).
    % inC  : cell generated by readpfile with the contents of matrizesXX.txt, where
    %        XX is some number between 01 and 10 (these are the input matrices).
    % batchsize : size of the chunk of data that will be read at each cycle. Since
    %             the amount of data (100 million matrices) exceeds the amount
    %             that MATLAB can treat at a time, we will do the analysis by
    %             chunks of dimension batchsize. Typical value: 1000
  
    allxE = cell2mat(outC);
    allP = cell2mat(inC);

    % This file computes the mean of the Frobenius norm of the Epsilon matrices,
    % and the mean of the all absolute values of the persymmetric differences
    % for diag(x)*(P+Epsilon) - the constraint violations.
    normdif = zeros(batchsize,1);
    maxerror = zeros(batchsize,1);
    for k = 1:min(batchsize,size(allxE,1))
        Epsilon = transpose(reshape(allxE(k,5:20),4,4));
        P = transpose(reshape(allP(k,:),4,4));
        % The frobenius norm for each Epsilon is 
        normdif(k) = norm(Epsilon, 'fro');
        % Now we compute the maximum persymmetric error for each matrix
        DXPE = diag(allxE(k,1:4))*(P+Epsilon);
        % The maximum persymmetric error for each matrix is
        maxerror(k) = max(abs([DXPE(1,3)-DXPE(2,4), DXPE(1,2)-DXPE(3,4), ...
                               DXPE(1,1)-DXPE(4,4), DXPE(2,2)-DXPE(3,3), ...
                               DXPE(2,1)-DXPE(4,3), DXPE(3,1)-DXPE(4,2)]));
    end
    % Replace Infs with zeros.
    infs = isinf(maxerror);

    maxerror(isinf(maxerror)) = 0; 
    count = length(maxerror) - sum(infs);
    
    i = find(count==0);
    count(i) = ones(size(i));
    
    meanerrors = sum(maxerror)./count;
    meannormdif = mean(normdif);

    graph = 1;
    if graph:
      plot(normdif)
    end
end

